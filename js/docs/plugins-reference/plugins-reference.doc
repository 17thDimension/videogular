@doc overview
@id index
@name Plugins reference
@description
#Plugins reference

In this section you will find the reference of Videogular's plugins.

If you want to learn how to build your own plugins visit section {@link ./documentation/videogular/using-videogular/plugin-example Plugin example}.

<page-list></page-list>


@doc overview
@id buffering
@name Buffering plugin
@description

<ul class="properties">
    <li>
        <h3 id="annotate">vgBuffering</h3>
        <div class="annotate">
            <p>Shows a spinner when Videogular is buffering or preparing the video player.</p>
        </div>
    </li>
</ul>

<pager></pager>


@doc overview
@id controlbar
@name Controlbar plugin
@description

<ul class="properties">
    <li>
        <h3 id="annotate">vgControls</h3>
        <div class="annotate">
            <p>Main directive that wraps buttons and components to control video.</p>
			<p>The directives inside vgControls will appear from left to right in the order that has been added in the HTML. For example:</p>
			<pre>
<div vg-controls vg-autohide="data.autoHide" style="height: 50px;">
	<div vg-playpauseButton></div><!-- First element on the left -->
	<div vg-timeDisplay>{{ currentTime }}</div><!-- Second element on the left -->
	<div vg-scrubBar><!-- Third element on the left -->
		<div vg-scrubbarcurrenttime></div>
	</div>
	<div vg-timeDisplay>{{ totalTime }}</div><!-- Fourth element on the left -->
	<div vg-volume><!-- Fifth element on the left -->
		<div vg-mutebutton></div>
		<div vg-volumebar></div>
	</div>
	<div vg-fullscreenButton></div><!-- Sixth element on the left -->
</div>
			</pre>
			
			<p>Also we need to set manually with an inline style our controlbar's height. This is a minor drawback to have flexible layouts in ``vgControls``.</p>
			
			<h3> Properties </h3>
            <ul class="parameters">
                <li>
                    ``vgAutohide`` - `{boolean or string}` -
                    <p>Boolean value to hide automatically the controlbar when 5 seconds have been passed. Passing a boolean will set the autohide property manually. Passing a string will create a binding with a scope variable in case it exists.</p>
                </li>
            </ul>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgPlaypausebutton</h3>
        <div class="annotate">
            <p>Directive that creates a button to play and pause the video.</p>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgTimedisplay</h3>
        <div class="annotate">
            <p>This directive creates a time display to show different values of video times.</p>
			<p>This directive is very flexible and you could use it as you want. To show the values that you want you just need to add {{currentTime}} or {{totalTime}} as AngularJS bindings. Next you could see a few examples of what you could do:</p>
			<pre>
// Shows only current time
<vg-timeDisplay>{{ currentTime }}</vg-timeDisplay>

// Shows current time and total time in different directives
<vg-timeDisplay>{{ currentTime }}</vg-timeDisplay>
// ... other directives in the middle
<vg-timeDisplay>{{ totalTime }}</vg-timeDisplay>

// Shows current time and total time in the same directive
<vg-timeDisplay>{{ currentTime }} / {{ totalTime }}</vg-timeDisplay>
			</pre>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgScrubbar</h3>
        <div class="annotate">
            <p>Creates a clickable container to seek in the video timeline.</p>
			<p>This directive usually contents ``vgScrubbarcurrenttime`` directive. This is made in this way to add other possible containers like ``vgScrubbarbufferingprogress`` or ``vgScrubbarnotes``.</p>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgScrubbarcurrenttime</h3>
        <div class="annotate">
            <p>Creates a clickable container to seek in the video's timeline that shows the current video position.</p>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgVolume</h3>
        <div class="annotate">
            <p>Creates a container for ``vgVolumebar`` and ``vgMutebutton``.</p>
			<p>Thanks to this you could create a new ``vgVolumebarHorizontal`` directive or if you want to have only a ``vgMutebutton`` inside.</p>
			<p>Because we can't change volume's through JavaScript on mobile devices this directive is automatically hidden if a mobile device is detected.</p>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgVolumebar</h3>
        <div class="annotate">
            <p>Creates a vertical clickable bar to set Videogular's volume.</p>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgMutebutton</h3>
        <div class="annotate">
            <p>Creates a button to mute Videogular's player.</p>
        </div>
    </li>
	<li>
        <h3 id="annotate">vgFullscreenbutton</h3>
        <div class="annotate">
            <p>Creates a button to enter in native full screen mode.</p>
			<p>In some browsers native full screen is not available, Videogular take care of this hiding this button if native full screen is not supported.</p>
        </div>
    </li>
</ul>

## Events

<ul class="properties">
    <li>
        <h3 id="annotate">ON_PLAY_PAUSE</h3>
        <div class="annotate">
            <p>Emitted every time the user clicks on ``vgPlaypausebutton``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_PAUSE</h3>
        <div class="annotate">
            <p>Emitted when user is seeking with ``vgScrubbar``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_PLAY</h3>
        <div class="annotate">
            <p>Emitted when user stops seeking with ``vgScrubbar``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_SEEK_TIME</h3>
        <div class="annotate">
            <p>Emitted when user have been seeked with ``vgScrubbar``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
			<h3> Params [array]: </h3>
            <p>[0] new video position</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_SET_VOLUME</h3>
        <div class="annotate">
            <p>Emitted when user have been changed volume with ``vgVolumebar`` or ``vgMutebutton``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
			<h3> Params [array]: </h3>
            <p>[0] new volume</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_TOGGLE_FULLSCREEN</h3>
        <div class="annotate">
            <p>Emitted when clicks on ``vgFullscreenbutton``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
</ul>

<pager></pager>

@doc overview
@id overlay-play
@name Overlay Play plugin
@description

<ul class="properties">
    <li>
        <h3 id="annotate">vgOverlayPlay</h3>
        <div class="annotate">
            <p>Creates a clickable layer over Videogular and shows a big play centered.</p>
        </div>
    </li>
</ul>

## Events

<ul class="properties">
    <li>
        <h3 id="annotate">ON_PLAY_PAUSE</h3>
        <div class="annotate">
            <p>Emitted every time the user clicks on the invisible layer to play or pause the video.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
        </div>
    </li>
</ul>

<pager></pager>

@doc overview
@id poster
@name Poster plugin
@description

<ul class="properties">
    <li>
        <h3 id="annotate">vgPosterImage</h3>
        <div class="annotate">
            <p>Shows an image when player hasn't been played or has been completed to play a video.</p>
			
			<p>Content will always appear centered.</p>

            <h3> Properties </h3>
            <ul class="parameters">
                <li>
                    ``vgPosterStretch`` - `{string}` -
                    <p>Defaults to <strong>"none"</strong>. This directive controls how the image object will scale. Possible values are:</p>
					<ul>
						<li><strong>"none"</strong>: Image object will appear at it's native size.</li>
						<li><strong>"fit"</strong>: Image will fit into its container to show all image. This is usually the best mode.</li>
						<li><strong>"fill"</strong>: Image will scale to avoid black borders. With this mode you will probably lose image content that will be outside of the screen.</li>
					</ul>
                </li>
            </ul>

        </div>
    </li>
</ul>

## Events

<ul class="properties">
    <li>
        <h3 id="annotate">ON_LOAD_POSTER</h3>
        <div class="annotate">
            <p>Emitted when image has been loaded.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
</ul>

<pager></pager>
