@doc overview
@id index
@name Videogular reference
@description
#Videogular reference

## Directives
<ul class="properties">
    <li>
        <h3 id="annotate">videogular</h3>
        <div class="annotate">
            <p>Main directive that must wrap a ``&lt;video&gt;`` tag with a class called ``"videoPlayer"``. This will change in the future and this class will be added automatically.</p>

			<p>Content will always appear centered.</p>
			
            <h3> Properties </h3>
            <ul class="parameters">
                <li>
                    ``vgWidth`` - `{number or string}` -
                    <p>This directive sets width for the entire player. Passing a number will set the width normally. Passing a string will create a binding with a scope variable in case it exists.</p>
					<p>If vg-width or vg-height ar not declared player will enter in a responsive mode and width will be 100% and height will be calculated through video metadata to preserver aspect ratio.</p>
                </li>
                <li>
                    ``vgHeight`` - `{number or string}` -
                    <p>This directive sets height for the entire player. Passing a number will set the height normally. Passing a string will create a binding with a scope variable in case it exists.</p>
					<p>If vg-width or vg-height ar not declared player will enter in a responsive mode and width will be 100% and height will be calculated through video metadata to preserver aspect ratio.</p>
                </li>
                <li>
                    ``vgTheme`` - `{string}` -
                    <p>String with a CSS url or scope name variable. Videogular will try to detect a ".css" chain to load the theme, but if no chain is found it will try to create a binding with a scope variable.</p>
					<p>This directive will inject a CSS link in the header of your page.</p>
					<p>This parameter is required.</p>
                </li>
                <li>
                    ``vgAutoplay`` - `{boolean}` -
                    <p>Boolean value to auto start playing video when it is initialized.</p>
                </li>
                <li>
                    ``vgPoster`` - `{string}` -
                    <p>Image URL or scope name variable to load the native HTML5 video poster. We strongly recommend to use Videogular's Poster plugin.</p>
                </li>
                <li>
                    ``vgVideoStretch`` - `{string}` -
                    <p>Defaults to <strong>"none"</strong>. This directive controls how the video object will scale. Possible values are:</p>
					<ul>
						<li><strong>"none"</strong>: Video object will appear at it's native size.</li>
						<li><strong>"fit"</strong>: Video will fit into its container to show all video. This is usually the best mode.</li>
						<li><strong>"fill"</strong>: Video will scale to avoid black borders. With this mode you will probably lose video content that will be outside of the screen.</li>
					</ul>
                </li>
            </ul>

        </div>
    </li>
</ul>

## Events

<ul class="properties">
    <li>
        <h3 id="annotate">ON_UPDATE_SIZE</h3>
        <div class="annotate">
            <p>Emitted every time the ``vgWidth``, ``vgHeight`` and ``vgVideoStretch`` properties change. When Videogular is in responsive mode, this event will be emitted also every time the browser is resized. This is also called when user enters in full screen mode.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
			<h3> Params [array]: </h3>
            <p>[0] new player width</p>
			<p>[1] new player height</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_UPDATE_TIME</h3>
        <div class="annotate">
            <p>Emitted when ``"timeupdate"`` video event is fired. This event could vary depending on browsers. Usually used to show current playing time.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
			<h3> Params [array]: </h3>
            <p>[0] video's current time</p>
			<p>[1] video's duration</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_PLAY</h3>
        <div class="annotate">
            <p>Emitted when video starts playing or when it has been unpaused.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_PAUSE</h3>
        <div class="annotate">
            <p>Emitted when video has been paused.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_BUFFERING</h3>
        <div class="annotate">
            <p>Emitted when ``"waiting"`` video event is fired. This event could vary depending on browsers. Usually used to show loading spinners and buffering messages.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_COMPLETE</h3>
        <div class="annotate">
            <p>Emitted when has been completed.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_START_PLAYING</h3>
        <div class="annotate">
            <p>Emitted when video starts for first time to play.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
			<h3> Params [array]: </h3>
            <p>[0] Video duration.</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_SET_STATE</h3>
        <div class="annotate">
            <p>Emitted every time player changes its state. Possible states could be ``"play"``, ``"pause"`` or ``"stop"``.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
			<h3> Params [array]: </h3>
            <p>[0] Current player state.</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_PLAYER_READY</h3>
        <div class="annotate">
            <p>Emitted when videogular dom object and video's metadata has been loaded.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_ENTER_FULLSCREEN</h3>
        <div class="annotate">
            <p>Emitted when videogular enters in native full screen mode.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_EXIT_FULLSCREEN</h3>
        <div class="annotate">
            <p>Emitted when videogular exits from native full screen mode.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
	<li>
        <h3 id="annotate">ON_UPDATE_THEME</h3>
        <div class="annotate">
            <p>Emitted when videogular have been changed its theme.</p>

            <h3> Type: </h3>
            <p>Emit</p>

			<h3> Target: </h3>
            <p>The current ngView scope</p>
			
        </div>
    </li>
</ul>



