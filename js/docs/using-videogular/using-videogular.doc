@doc overview
@name index
@description
#Using Videogular

Videogular is an HTML5 video player for AngularJS. Videogular is a wrapper over the HTML5 video tag, so you just could add whatever you want. This provides a very powerful, but simple to use solution, for everybody.

We're developing Videogular focusing on mobile devices and HTML5 video special capabilities. Videogular brings to you this key features:

<ul>
	<li><strong>Bindable properties:</strong> Videogular's directives are bindable, just <a href="http://twofuckingdevelopers.com/examples/videogular/examples/" target="_blank">try the demo</a> and play with bindings.</li>
	<li><strong>Extendable through plugins:</strong> Thanks to our API you can develop your own plugins.</li>
	<li><strong>Theme based:</strong> Customize it with your own themes and change between them on the fly.</li>
	<li><strong>Native fullscreen support:</strong> Enjoy with native fullscreen support for Chrome, Firefox, Safari, iOS and Chrome for Android.</li>
	<li><strong>Mobile support:</strong> Videogular can detect mobile devices to show/hide components in case that aren't supported.</li>
</ul>

<page-list></page-list>


@doc overview
@id how-to-use-videogular
@name How to use Videogular
@description

To start using Videogular, just create a DIV with the videogular attribute and the video tag inside. In AngularJS the HTML5 poster video attribute is not supported, so you could use vg-poster to add your image to your video tag. With vg-width and vg-height directives you could set an Integer value or a binding to a scope variable. You don't need to set a width and height to video tag, Videogular will do that for you.

```xhtml
&lt;div videogular vg-width=&quot;400&quot; vg-height=&quot;300&quot; vg-theme=&quot;themes/default/default.css&quot;&gt;<br/>
    &lt;video class='videoPlayer' controls preload='none' vg-poster='assets/images/oceans-clip.png'&gt;<br/>
	&lt;source src='assets/videos/oceans-clip.mp4' type='video/mp4'&gt;<br/>
	&lt;source src='assets/videos/oceans-clip.webm' type='video/webm'&gt;<br/>
	&lt;source src='assets/videos/oceans-clip.ogv' type='video/ogg'&gt;<br/>
    &lt;/video&gt;<br/>
&lt;/div&gt;
```

Because videogular is an HTML5 video player for AngularJS it works (obviously) with all AngularJS directives.

```xhtml
&lt;div videogular vg-width=&quot;400&quot; vg-height=&quot;300&quot; vg-theme=&quot;themes/default/default.css&quot;&gt;<br/>
    &lt;video class='videoPlayer' preload='none' vg-poster='{{ data.poster }}'&gt;<br/>
	&lt;source ng-repeat='media in data.media' ng-src='{{ media.url }}' type='{{ media.type }}'&gt;<br/>
    &lt;/video&gt;<br/>
&lt;/div&gt;
```

<pager></pager>

@doc overview
@id plugins
@name Plugins
@description

With Videogular you can write your own plugins through a simple API based in events. Plugins should be directives and they should communicate with videogular directive through an API based in events.

#API Events

<ul>
	<li>VG_EVENTS.ON_PLAY: Triggered when video plays.</li>
	<li>VG_EVENTS.ON_PAUSE: Triggered when video is paused.</li>
	<li>VG_EVENTS.ON_PLAY_PAUSE: Triggered when play/pause video state toggles.</li>
	<li>VG_EVENTS.ON_START_PLAYING: Triggered when video starts playing after buffer.</li>
	<li>VG_EVENTS.ON_COMPLETE: Triggered when video is completed</li>
	<li>VG_EVENTS.ON_SET_STATE: Triggered when state changes. Possible values could be "play", "pause" or "stop".</li>
	<li>VG_EVENTS.ON_SET_VOLUME: Triggered when volume changes.</li>
	<li>VG_EVENTS.ON_TOGGLE_FULLSCREEN: Triggered when fullscreen changes.</li>
	<li>VG_EVENTS.ON_ENTER_FULLSCREEN: Triggered when video enters in fullscreen.</li>
	<li>VG_EVENTS.ON_EXIT_FULLSCREEN: Triggered when video exits from fullscreen.</li>
	<li>VG_EVENTS.ON_BUFFERING: Triggered when video is buffering.</li>
	<li>VG_EVENTS.ON_UPDATE_TIME: Triggered when video progress updates.</li>
	<li>VG_EVENTS.ON_UPDATE_SIZE: Triggered when video size updates.</li>
	<li>VG_EVENTS.ON_PLAYER_READY: Triggered when DOM elements are ready. Very useful to initialize plugins.</li>
</ul>

<pager></pager>

@doc overview
@id plugin-example
@name Plugin example
@description

Currently you will find a plugins folder with some source code to inspire you, however, you could see how easy is to write your own plugin with this example:

```js
var myVGPlugin = angular.module("com.2fdevs.videogular.plugins.myPlugin", []);
myVGPlugin.directive("vgMyPlugin", function(VG_EVENTS){
        return {
            restrict: "E",
            template: "<div>my videogular plugin</div>",
            link: function(scope, elem, attrs) {
                function onChangeState(target, params) {
                    console.log("state changed to " + params[0]);
                }

                scope.$on(VG_EVENTS.ON_SET_STATE, onChangeState);
            }
        }
    }
);
```

<pager></pager>

@doc overview
@id adding-a-plugin
@name Adding a plugin
@description

To add a plugin just add your directives to your HTML. This is an example of a Videogular player:

```xhtml
&lt;div videogular vg-width=&quot;400&quot; vg-height=&quot;300&quot;&gt;<br/>
    &lt;video class='videoPlayer' preload='none' vg-poster='{{ data.poster }}'&gt;<br/>
		&lt;source ng-repeat='media in data.media' ng-src='{{ media.url }}' type='{{ media.type }}'&gt;<br/>
    &lt;/video&gt;<br/>
	<br/>
    &lt;vg-buffering&gt;&lt;/vg-buffering&gt;<br/>
    &lt;vg-overlayPlay&gt;&lt;/vg-overlayPlay&gt;<br/>
    &lt;vg-myplugin&gt;&lt;/vg-myplugin&gt;<br/>
	<br/>
    &lt;vg-controls vg-autohide=&quot;false&quot; style=&quot;height: 50px;&quot;&gt;<br/>
		&lt;vg-playpauseButton&gt;&lt;/vg-playpauseButton&gt;<br/>
		&lt;vg-timeDisplay&gt;{{ currentTime }}&lt;/vg-timeDisplay&gt;<br/>
		&lt;vg-scrubBar&gt;<br/>
			&lt;vg-scrubbarcurrenttime&gt;&lt;/vg-scrubbarcurrenttime&gt;<br/>
		&lt;/vg-scrubBar&gt;<br/>
		&lt;vg-timeDisplay&gt;{{ totalTime }}&lt;/vg-timeDisplay&gt;<br/>
		&lt;vg-volume&gt;<br/>
			&lt;vg-mutebutton&gt;&lt;/vg-mutebutton&gt;<br/>
			&lt;vg-volumebar&gt;&lt;/vg-volumebar&gt;<br/>
		&lt;/vg-volume&gt;<br/>
		&lt;vg-fullscreenButton&gt;&lt;/vg-fullscreenButton&gt;<br/>
    &lt;/vg-controls&gt;<br/>
&lt;/div&gt;
```

Because AngularJS is so cool, you could just remove or add any directive and the player should work as expected. For example, you could remove <vg-timeDisplay>{{ currentTime }}</vg-timeDisplay> and change <vg-timeDisplay>{{ totalTime }}</vg-timeDisplay> for <vg-timeDisplay>{{ currentTime }} / {{ totalTime }}</vg-timeDisplay> to change your time display component.

```xhtml
&lt;div videogular vg-width=&quot;400&quot; vg-height=&quot;300&quot;&gt;<br/>
    &lt;video class='videoPlayer' preload='none' vg-poster='{{ data.poster }}'&gt;<br/>
		&lt;source ng-repeat='media in data.media' ng-src='{{ media.url }}' type='{{ media.type }}'&gt;<br/>
    &lt;/video&gt;<br/>
	<br/>
    &lt;vg-buffering&gt;&lt;/vg-buffering&gt;<br/>
    &lt;vg-overlayPlay&gt;&lt;/vg-overlayPlay&gt;<br/>
	<br/>
    &lt;vg-controls vg-autohide=&quot;false&quot; style=&quot;height: 50px;&quot;&gt;<br/>
		&lt;vg-playpauseButton&gt;&lt;/vg-playpauseButton&gt;<br/>
		&lt;vg-scrubBar&gt;<br/>
			&lt;vg-scrubbarcurrenttime&gt;&lt;/vg-scrubbarcurrenttime&gt;<br/>
		&lt;/vg-scrubBar&gt;<br/>
		&lt;vg-timeDisplay&gt;{{ currentTime }} / {{ totalTime }}&lt;/vg-timeDisplay&gt;<br/>
		&lt;vg-volume&gt;<br/>
			&lt;vg-mutebutton&gt;&lt;/vg-mutebutton&gt;<br/>
			&lt;vg-volumebar&gt;&lt;/vg-volumebar&gt;<br/>
		&lt;/vg-volume&gt;<br/>
		&lt;vg-fullscreenButton&gt;&lt;/vg-fullscreenButton&gt;<br/>
    &lt;/vg-controls&gt;<br/>
&lt;/div&gt;
```

In the same way you could remove <vg-volumebar></vg-volumebar> and leave only <vg-mutebutton></vg-mutebutton> and so on. That's an easy way to build your own Videogular layout.

Additionally, you will need to add your module plugins and videogular to your application:

```js
"use strict";
var videogularApp = angular.module("videogularApp",
    [
        "controllers",

        "com.2fdevs.videogular",
        "com.2fdevs.videogular.plugins.controlbar",
        "com.2fdevs.videogular.plugins.overlayplay",
        "com.2fdevs.videogular.plugins.buffering",
        "com.2fdevs.videogular.plugins.myPlugin"
    ]
);
```
And that's all :)

<pager></pager>

@doc overview
@id themes
@name Themes
@description

Videogular supports a very simple theme system through vg-theme directive and CSS styles.

To set your theme just set vg-theme attribute with a CSS url or a scope variable. If you pass a scope variable Videogular creates a binding and you just could change your theme on the fly.

Setting a binding through a scope variable is possible. In this example "theme" is a scope variable with a value like "themes/default/videogular.css":

```xhtml
&lt;div videogular vg-width=&quot;400&quot; vg-height=&quot;300&quot; vg-theme=&quot;theme&quot;&gt;<br/>
    &lt;!-- Videogular plugins and video tag... --&gt;<br/>
&lt;/div&gt;
```

To set a CSS theme without bindings pass a String with ".css" inside. Videogular will load and inject the CSS on the HTML:

```xhtml
&lt;div videogular vg-width=&quot;400&quot; vg-height=&quot;300&quot; vg-theme=&quot;themes/default/videogular.css&quot;&gt;<br/>
    &lt;!-- Videogular plugins and video tag... --&gt;<br/>
&lt;/div&gt;
```

To change and create your own themes should be very easy just modifying examples/css/videogular.css file.

<pager></pager>